#!/usr/bin/sh
# wal colorscheme and wallpaper selection
# Version 0.4

# Define directories
WALLPAPER_DIR="$HOME/pictures/wallpapers/space/"
WAL_CACHE="$HOME/.cache/wallust/wallpaper"
CHWAL_CACHE="$HOME/.cache/wallust/wal"
RMWAL_DIR="$WALLPAPER_DIR/rmwal"

# Define command behavior
CAT="command cat"
MV="command mv"
MKDIR="command mkdir"
FIND="command find"
WAL="command wallust run --quiet"

_version() {
    echo "chwal 0.4"
}

_help() {
    _version
    echo "Wrapper around wal for managing wallpapers. The default behavior"
    echo "changes wallpaper and sets global colors. If the WM is AwesomeWM,"
    echo "the script will restart it to apply the new colorscheme."
    echo
    echo "Usage: chwal -[d|h|l|r|V]"
    echo "  -d    Specify the wallpaper directory."
    echo "        e.g. chwal -d $HOME/pictures/wallpapers"
    echo "  -h    Print this help message and exit."
    echo "  -l    Pre-generate themes for images in the wallpaper directory."
    echo "  -r    Mark the current wallpaper for deletion by moving it to"
    echo "        \$WALLPAPER_DIR/rmwal/\$CURRENT_WALLPAPER."
    echo "  -V    Print software version and exit."
    echo
    return 0
}

_wal() {
    # Generate the colorscheme and update config files
    if ! $WAL "$($CAT "$WAL_CACHE")"; then {
        echo "Error: Could not generate colorscheme."
        return 1
    }; fi
}

_rmwal() {
    # Mark the current wallpaper for removal
    if [ -f "$($CAT "$WAL_CACHE")" ]; then {
        if [ ! -d "$RMWAL_DIR" ]; then {
            $MKDIR "$RMWAL_DIR"
        }; fi
        $MV "$($CAT "$WAL_CACHE")" "$RMWAL_DIR"
    }; fi
    return 0
}

_ldwal() {
    # Pre-generate themes for the images in the given directory
    WAL_QUIET="command wallust run -qsT"
    for file in "$WALLPAPER_DIR"/*; do {
        $WAL_QUIET "$file"
    }; done
    return 0
}

_newal() {
    # Select new random wallpaper and cache it
    WALLPAPER="$($FIND . "$WALLPAPER_DIR" | shuf | head -n 1)"
    echo "$WALLPAPER" >|"$WAL_CACHE"
    command cp "$(cat "$WAL_CACHE")" "$CHWAL_CACHE"
    return
}

_reload() {
    # Restart AwesomeWM to apply the new colorscheme
    if [ "$XDG_SESSION_DESKTOP" = 'awesome' ]; then {
        # Apply colorscheme to Xresources
        if [ -x "$(command -v xrdb)" ]; then {
            xrdb -merge -quiet ~/.config/Xresources
        }; fi
        echo 'awesome.restart()' | awesome-client >/dev/null 2>&1
    }; fi

    # Reload Hyprland wallpaper
    if [ "$XDG_SESSION_DESKTOP" = 'Hyprland' ]; then {
        hyprctl hyprpaper preload "$($CAT "$WAL_CACHE")" >/dev/null 2>&1 &&
            hyprctl hyprpaper wallpaper ",$($CAT "$WAL_CACHE")" >/dev/null 2>&1
    }; fi
}

_chwal() {
    _wal && _reload
    _newal
    return
}

# If wallust is not executable, exit
if [ ! -x "$(command -v wallust)" ]; then {
    echo "Error: Required program wallust not found."
    echo "Aborting script."
    exit 1
}; fi

# Process args
while getopts ":d:lrVh" option; do {
    case $option in
    d) # Set Wallpaper Directory
        WALLPAPER_DIR="$OPTARG"
        ;;
    h) # Display Help
        _help
        exit
        ;;
    l)
        _ldwal
        exit
        ;;
    r)
        _rmwal
        exit
        ;;
    V) # Version
        _version
        exit
        ;;
    \?) # Invalid option
        echo "Error: Invalid option"
        echo "Syntax: chwal -[r|h|V]"
        exit 1
        ;;
    esac
} done

# Change the theme
_chwal && exit
